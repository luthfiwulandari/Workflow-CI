name: CI Workflow Skilled (MLflow Project + GitHub Artifact Upload)

on:
  push:
    branches:
      - main # Ganti jika branch utama Anda berbeda
  # Anda bisa tambahkan trigger lain, misalnya pull_request:

jobs:
  build-and-upload: # Nama job, bisa disesuaikan
    runs-on: ubuntu-latest # Menggunakan runner

    steps:
    - name: Set up job # Langkah Set up job (ini adalah langkah otomatis oleh runner)
      run: echo "Starting job setup." # Placeholder, sebenarnya otomatis

    - name: Run actions/checkout@v3 # Langkah Run actions/checkout@v3 (Menggunakan action)
      uses: actions/checkout@v3 # Menggunakan action untuk checkout kode

    - name: Set up Python 3.12.7 # Langkah Set up Python 3.12.7 (Menggunakan action)
      uses: actions/setup-python@v4 # Menggunakan action untuk menyiapkan Python
      with:
        python-version: '3.12' # Sesuaikan dengan versi di conda.yaml

    # Langkah ini opsional jika Anda hanya mengandalkan environment-file di setup-miniconda
    # - name: Check Env # Langkah Check Env (Placeholder)
    #   run: |
    #     echo "Checking environment status step (Placeholder)."
    #     # Contoh: conda info --envs


    - name: Install dependencies # Langkah Install dependencies (Menggunakan Miniconda env)
      uses: conda-incubator/setup-miniconda@v2 # Menggunakan action untuk menyiapkan Miniconda dan environment
      with:
        miniconda-version: "latest"
        python-version: 3.12 # Pastikan sesuai dengan versi di conda.yaml
        auto-activate-base: false
        activate-environment: heart-disease-env # Penting: Memberi tahu action untuk membuat/mengaktifkan environment ini
        environment-file: MLProject/conda.yaml # Path ke conda.yaml Anda (relatif dari root repo)

    # Langkah Install MLflow dasar (tanpa extras docker yang eksplisit jika tidak diperlukan)
    # Jika conda.yaml sudah mencantumkan mlflow, ini mungkin tidak perlu
    # Jika sebelumnya kita butuh 'mlflow[docker]' untuk build-docker, sekarang mungkin cukup 'mlflow'
    - name: Install MLflow (basic) # Langkah tambahan, pastikan mlflow terinstal
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Installing mlflow using pip..."
        conda activate heart-disease-env # Aktifkan environment
        # Cukup instal mlflow dasar jika tidak perlu build-docker
        # Atau biarkan mlflow[docker] jika di conda.yaml
        pip install mlflow --upgrade # Atau sesuaikan jika di conda.yaml pakai [docker]
        echo "mlflow installation complete."


    # Mengatur variabel environment untuk MLflow Tracking (menggunakan secrets Anda - Opsional jika tidak pakai DagsHub)
    # Jika Anda menggunakan tracking lokal, hapus langkah ini
    - name: Set up MLflow Tracking URI (Optional - for remote tracking like DagsHub) # Langkah tambahan, untuk DagsHub/MLflow Tracking (Opsional)
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Setting up MLflow Tracking URI (Optional - remove if using local tracking)..."
        conda activate heart-disease-env
        # Menggunakan nama secrets sesuai dengan yang Anda miliki (untuk DagsHub)
        echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV # Hapus atau sesuaikan jika tidak pakai DagsHub
        echo "DAGSHUB_USER=${{ secrets.DAGSHUB_USER }}" >> $GITHUB_ENV # Hapus jika tidak pakai DagsHub
        echo "DAGSHUB_TOKEN=${{ secrets.DAGSHUB_PASSWORD }}" >> $GITHUB_ENV # Menggunakan DAGSHUB_PASSWORD (pastikan isinya token DagsHub), Hapus jika tidak pakai DagsHub
        echo "MLflow Tracking URI set."


    # Menjalankan MLflow Project untuk melatih model dan mencatatnya (secara lokal atau remote jika DagsHub dikonfigurasi)
    - name: Run mlflow project # Langkah Run mlflow project
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Running MLflow project..."
        # Konfigurasi MLflow Tracking
        # Jika Anda menggunakan DagsHub, setel ke URI DagsHub (jika tidak diatur di langkah sebelumnya)
        # Jika Anda menggunakan tracking lokal, gunakan path lokal seperti di bawah
        export MLFLOW_TRACKING_URI="./mlruns" # <--- Mengatur tracking lokal (sesuaikan jika pakai DagsHub)
        echo "MLFLOW_TRACKING_URI set to: ${MLFLOW_TRACKING_URI}"

        # Mengaktifkan environment dan menjalankan mlflow run
        conda activate heart-disease-env
        cd MLProject # Path yang benar relatif dari root repo
        mlflow run . -e main -P data_path=heart_clean.csv # --no-conda dihapus

    # Langkah ini opsional jika Anda tidak perlu mengambil run ID secara eksplisit di workflow
    # - name: Get latest MLflow run_id # Langkah Get latest MLflow run_id (Placeholder)
    #   shell: bash -l {0}
    #   run: |
    #     echo "Placeholder for getting run ID. Implement code here if needed."


    # Langkah Install dependensi Python tambahan jika ada yang tidak di conda.yaml
    # Menggunakan nama langkah yang mirip dengan daftar Anda
    - name: Install Python dependencies # Langkah Install Python dependencies (additional)
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Installing additional Python dependencies step (modify if needed)."
        # Contoh: conda activate heart-disease-env && pip install nama_library_tambahan


    # Langkah Upload Artefak ke GitHub Actions
    - name: Upload to Github Artifact # Langkah Upload to Google Drive (Diganti dengan Upload to GitHub Artifacts)
      # Menggunakan action resmi untuk mengunggah artefak workflow ke GitHub
      uses: actions/upload-artifact@v4 # <--- Menggunakan action upload artifact GitHub (VERSI v3)

      with:
        # Nama artefak yang akan muncul di halaman run workflow
        name: mlflow-run-artifacts # <--- Beri nama yang deskriptif

        # Path folder atau file yang akan diunggah (relatif dari root repo)
        # Ini akan mengunggah folder mlruns yang dibuat oleh mlflow run
        path: MLProject/mlruns/ # <--- Path ke folder artefak MLflow lokal Anda

        # (Opsional) Durasi penyimpanan artefak (default 90 hari)
        retention-days: 7 # Contoh: simpan selama 7 hari


    # LANGKAH-LANGKAH DOCKER DIHAPUS UNTUK KRITERIA SKILLED


    # Langkah-langkah Post (Biasanya otomatis ditangani oleh actions)
    # Ini adalah langkah cleanup yang dijalankan setelah job selesai
    - name: Post Log in to Docker Hub # Langkah Post Log in to Docker Hub (Otomatis oleh action) - Dibiarkan saja atau bisa dihapus
      run: echo "Post Login handled by action." # Placeholder

    - name: Post Set up Python 3.12.7 # Langkah Post Set up Python 3.12.7 (Otomatis oleh action)
      run: echo "Post Python setup handled by action." # Placeholder

    - name: Post Run actions/checkout@v3 # Langkah Post Run actions/checkout@v3 (Otomatis oleh action)
      run: echo "Post Checkout handled by action." # Placeholder

    - name: Complete job # Langkah Complete job
      run: echo "Job completed successfully."
