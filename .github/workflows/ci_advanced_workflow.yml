name: CI Workflow Advanced (MLflow Project + Docker + Google Drive Upload - Local Tracking)

on:
  push:
    branches:
      - main # Ganti jika branch utama Anda berbeda
  # Anda bisa tambahkan trigger lain, misalnya pull_request:

jobs:
  build-and-deploy: # Nama job, bisa disesuaikan
    runs-on: ubuntu-latest # Menggunakan runner

    steps:
    - name: Set up job # Langkah Set up job (ini adalah langkah otomatis oleh runner)
      run: echo "Starting job setup." # Placeholder, sebenarnya otomatis

    - name: Run actions/checkout@v3 # Langkah Run actions/checkout@v3 (Menggunakan action)
      uses: actions/checkout@v3 # Menggunakan action untuk checkout kode

    - name: Set up Python 3.12.7 # Langkah Set up Python 3.12.7 (Menggunakan action)
      uses: actions/setup-python@v4 # Menggunakan action untuk menyiapkan Python
      with:
        python-version: '3.12' # Sesuaikan dengan versi di conda.yaml

    # Langkah ini opsional jika Anda hanya mengandalkan environment-file di setup-miniconda
    # - name: Check Env # Langkah Check Env (Placeholder)
    #   run: |
    #     echo "Checking environment status step (Placeholder)."
    #     # Contoh: conda info --envs


    - name: Install dependencies # Langkah Install dependencies (Menggunakan Miniconda env)
      uses: conda-incubator/setup-miniconda@v2 # Menggunakan action untuk menyiapkan Miniconda dan environment
      with:
        miniconda-version: "latest"
        python-version: 3.12 # Pastikan sesuai dengan versi di conda.yaml
        auto-activate-base: false
        activate-environment: heart-disease-env # Penting: Memberi tahu action untuk membuat/mengaktifkan environment ini
        environment-file: MLProject/conda.yaml # Path ke conda.yaml Anda (relatif dari root repo)

    # Langkah tambahan: Memastikan MLflow terinstal dengan dukungan Docker secara eksplisit
    - name: Install MLflow with Docker Support # Langkah tambahan, diperlukan untuk build-docker
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Installing mlflow[docker] using pip..."
        conda activate heart-disease-env # Aktifkan environment
        # Gunakan pip untuk menginstal atau mengupdate mlflow dengan dukungan docker
        pip install mlflow[docker] --upgrade # Gunakan --upgrade untuk memastikan versi terbaru dan extras terinstal
        echo "mlflow[docker] installation complete."


    # Mengatur variabel environment untuk MLflow Tracking (menggunakan secrets Anda)
    # Langkah ini opsional jika Anda TIDAK menggunakan DagsHub/remote tracking
    # Jika Anda menggunakan tracking lokal, hapus langkah ini
    - name: Set up MLflow Tracking URI # Langkah tambahan, untuk DagsHub/MLflow Tracking (Opsional)
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Setting up MLflow Tracking URI (Optional - remove if using local tracking)..."
        conda activate heart-disease-env
        # Menggunakan nama secrets sesuai dengan yang Anda miliki (untuk DagsHub)
        echo "MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}" >> $GITHUB_ENV
        echo "DAGSHUB_USER=${{ secrets.DAGSHUB_USER }}" >> $GITHUB_ENV
        echo "DAGSHUB_TOKEN=${{ secrets.DAGSHUB_PASSWORD }}" >> $GITHUB_ENV # Menggunakan DAGSHUB_PASSWORD (pastikan isinya token DagsHub)
        echo "MLflow Tracking URI set."


    # Menjalankan MLflow Project untuk melatih model dan mencatatnya (secara lokal)
    - name: Run mlflow project # Langkah Run mlflow project
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Running MLflow project with local tracking..."
        # Konfigurasi MLflow Tracking ke path lokal (PASTIKAN INI KONSISTEN DENGAN CARA ANDA TRACKING)
        # Jika Anda menggunakan DagsHub, hapus baris ini atau setel ke URI DagsHub
        export MLFLOW_TRACKING_URI="./mlruns" # <--- Mengatur tracking lokal
        echo "MLFLOW_TRACKING_URI set to local: ${MLFLOW_TRACKING_URI}"

        # Mengaktifkan environment dan menjalankan mlflow run
        conda activate heart-disease-env
        cd MLProject # Path yang benar relatif dari root repo
        mlflow run . -e main -P data_path=heart_clean.csv # --no-conda dihapus

    # Langkah ini opsional jika Anda tidak perlu mengambil run ID secara eksplisit di workflow
    # - name: Get latest MLflow run_id # Langkah Get latest MLflow run_id (Placeholder)
    #   shell: bash -l {0}
    #   run: |
    #     echo "Placeholder for getting run ID. Implement code here if needed."

    # Langkah Install dependensi Python tambahan jika ada yang tidak di conda.yaml
    # Menggunakan nama langkah yang mirip dengan daftar Anda
    - name: Install Python dependencies # Langkah Install Python dependencies (additional)
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Installing additional Python dependencies step (modify if needed)."
        # Contoh: conda activate heart-disease-env && pip install nama_library_tambahan


    # Langkah Upload Artefak ke Google Drive menggunakan Rclone (menggunakan secrets Anda)
    - name: Upload to Google Drive # Langkah Upload to Google Drive
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Installing Rclone..."
        # Unduh dan instal Rclone
        curl https://rclone.org/install.sh | sudo bash

        echo "Setting up Rclone config file from secret..."
        # Tentukan path untuk file konfigurasi sementara
        RCLONE_CONFIG_TEMP_PATH="/home/runner/.config/rclone/rclone.conf" # Path standar Rclone atau path sementara lain
        mkdir -p $(dirname "${RCLONE_CONFIG_TEMP_PATH}") # Buat direktori jika belum ada

        # Tulis isi secret 'GDRIVE' (huruf besar) ke file konfigurasi sementara
        echo "${{ secrets.GDRIVE }}" > "${RCLONE_CONFIG_TEMP_PATH}" # <--- Menggunakan secrets.GDRIVE (huruf besar)

        # Beri tahu Rclone untuk menggunakan file konfigurasi ini
        export RCLONE_CONFIG_PATH="${RCLONE_CONFIG_TEMP_PATH}"

        # Nama remote Google Drive Anda dari RCLONE_CONFIG (secret GDRIVE)
        REMOTE_NAME="gdrive" # <--- NAMA REMOTE ANDA (sesuai secret Anda)

        # Path ke folder artefak di runner (mlruns ada di dalam MLProject setelah mlflow run)
        SOURCE_PATH="MLProject/mlruns/" # <--- Path ke folder artefak di runner

        # Menggunakan secret yang berisi ID folder tujuan di Google Drive
        DESTINATION_FOLDER_ID="${{ secrets.GDRIVE_FOLDER_ID }}" # Menggunakan secret ID folder Anda

        echo "Uploading artifacts from ${SOURCE_PATH} to Google Drive folder ID ${DESTINATION_FOLDER_ID} using Rclone remote ${REMOTE_NAME}..."

        # Menggunakan rclone copy untuk menyalin file
        rclone copy "${SOURCE_PATH}" "${REMOTE_NAME}:${DESTINATION_FOLDER_ID}" --verbose --progress || { echo "Rclone upload failed!"; exit 1; }

        echo "Rclone upload complete."


    # Langkah-langkah Docker (menggunakan secrets Docker Hub Anda)
    - name: Build Docker Model # Langkah Build Docker Model
      shell: bash -l {0} # Menggunakan login shell bash
      run: |
        echo "Building Docker image..."
        # Konfigurasi MLflow Tracking ke path lokal agar mlflow build-docker bisa menemukan model
        # Jika Anda menggunakan DagsHub, setel ke URI DagsHub atau hapus baris ini jika sudah diatur di langkah sebelumnya
        export MLFLOW_TRACKING_URI="./mlruns" # <--- Mengatur tracking lokal
        echo "MLFLOW_TRACKING_URI set to local for build-docker: ${MLFLOW_TRACKING_URI}"

        # Mengaktifkan environment dan menjalankan mlflow build-docker
        conda activate heart-disease-env # Tetap aktifkan environment
        # --model-uri harus menunjuk ke model yang berhasil dicatat oleh langkah mlflow run sebelumnya
        # "runs:/<nama_run>/<artifact_path_model>"
        # Nama run default dari autolog adalah RandomForest_Autolog_Project (sesuaikan jika beda)
        # Artifact path default untuk model autolog adalah "model"
        # Ganti lthfiwlndri/heart-disease-model dengan nama image yang Anda inginkan di Docker Hub
        mlflow build-docker Workflow-CI/MLProject --model-uri "runs:/RandomForest_Autolog_Project/model" --image "lthfiwlndri/heart-disease-model" # Sesuaikan dengan Docker Hub Anda

    - name: Log in to Docker Hub # Langkah Log in to Docker Hub
      uses: docker/login-action@v3 # Menggunakan action untuk login Docker
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }} # Pastikan nama secret sesuai
        password: ${{ secrets.DOCKERHUB_TOKEN }}   # Pastikan nama secret sesuai

    - name: Tag Docker Image # Langkah Tag Docker Image
      run: |
        echo "Tagging Docker image..."
        # Tag image yang dibangun oleh mlflow build-docker
        # Nama image default dari mlflow build-docker adalah nama project/nama run (misalnya: heart-disease-prediction/randomforest_autolog_project)
        # Kita tag ulang dengan format Docker Hub: <YOUR_DOCKERHUB_USERNAME>/<YOUR_IMAGE_NAME>:tag
        # Ganti lthfiwlndri/heart-disease-model dengan nama image yang Anda gunakan di langkah build
        # Pastikan nama image awal (heart-disease-prediction/randomForest_Autolog_Project) sesuai dengan output langkah build
        docker tag heart-disease-prediction/randomForest_Autolog_Project lthfiwlndri/heart-disease-model:latest # Sesuaikan dengan Docker Hub Anda

    - name: Push Docker Image # Langkah Push Docker Image
      run: |
        echo "Pushing Docker image to Docker Hub..."
        docker push lthfiwlndri/heart-disease-model:latest # Ganti dengan nama image Docker Hub Anda

    # Langkah-langkah Post (Biasanya otomatis ditangani oleh actions)
    # Ini adalah langkah cleanup yang dijalankan setelah job selesai
    - name: Post Log in to Docker Hub # Langkah Post Log in to Docker Hub (Otomatis oleh action) - Dibiarkan saja atau bisa dihapus
      run: echo "Post Login handled by action." # Placeholder

    - name: Post Set up Python 3.12.7 # Langkah Post Set up Python 3.12.7 (Otomatis oleh action)
      run: echo "Post Python setup handled by action." # Placeholder

    - name: Post Run actions/checkout@v3 # Langkah Post Run actions/checkout@v3 (Otomatis oleh action)
      run: echo "Post Checkout handled by action." # Placeholder

    - name: Complete job # Langkah Complete job
      run: echo "Job completed successfully."
